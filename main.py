import logging
import os
from telegram import __version__ as TG_VER
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot
try:
    from telegram import __version_info__
except ImportError:
    __version_info__ = (0, 0, 0, 0, 0)
if __version_info__ < (20, 0, 0, "alpha", 1):
    raise RuntimeError(f"–¢—Ä–µ–±—É–µ—Ç—Å—è python-telegram-bot 20.0+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {TG_VER}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    raise ValueError("Telegram token –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
CATEGORIES = [
    {
        "emoji": "üíª",
        "name": "–ù–æ—É—Ç–±—É–∫–∏ –∏ –ø–ª–∞–Ω—à–µ—Ç—ã",
        "description": "–ù–æ—É—Ç–±—É–∫–∏, –ø–ª–∞–Ω—à–µ—Ç—ã, 2-–≤-1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç –≤–µ–¥—É—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤",
        "url": "https://osait.ru/category/noutbuki-i-planshety/ "
    },
    {
        "emoji": "üñ•Ô∏è",
        "name": "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã",
        "description": "–°–∏—Å—Ç–µ–º–Ω—ã–µ –±–ª–æ–∫–∏, –º–æ–Ω–æ–±–ª–æ–∫–∏ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
        "url": "https://osait.ru/category/kompyutery/ "
    },
    {
        "emoji": "üì±",
        "name": "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å",
        "description": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, —Å–º–∞—Ä—Ç-—á–∞—Å—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "url": "https://osait.ru/category/mobilnaya-svyaz/ "
    },
    {
        "emoji": "üì∫",
        "name": "–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "description": "LED/Smart TV, –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä—ã",
        "url": "https://osait.ru/category/televizory-i-aksessuary/ "
    },
    {
        "emoji": "üñ±Ô∏è",
        "name": "–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤",
        "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, SSD –∏ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ",
        "url": "https://osait.ru/category/komplektuyushchie-dlya-kompyuterov/ "
    },
    {
        "emoji": "üéÆ",
        "name": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤",
        "description": "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏, –≥–µ–π–º–ø–∞–¥—ã –∏ –≥–∞—Ä–Ω–∏—Ç—É—Ä—ã",
        "url": "https://osait.ru/category/oborudovanie-dlya-geymerov/ "
    },
    {
        "emoji": "üñ®Ô∏è",
        "name": "–ü–µ—Ä–∏—Ñ–µ—Ä–∏—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "description": "–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º—ã—à–∏, –∫–æ–ª–æ–Ω–∫–∏ –∏ –≤–µ–±-–∫–∞–º–µ—Ä—ã",
        "url": "https://osait.ru/category/periferiya-i-aksessuary/ "
    },
    {
        "emoji": "üè†",
        "name": "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞",
        "description": "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏, —Å—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
        "url": "https://osait.ru/category/bytovaya-tekhnika-dlya-doma/ "
    },
    {
        "emoji": "üéß",
        "name": "–ê—É–¥–∏–æ-–≤–∏–¥–µ–æ —Ç–µ—Ö–Ω–∏–∫–∞",
        "description": "Hi-Fi —Å–∏—Å—Ç–µ–º—ã, –Ω–∞—É—à–Ω–∏–∫–∏ –∏ –ø—Ä–æ–µ–∫—Ç–æ—Ä—ã",
        "url": "https://osait.ru/category/audio-video-tekhnika/ "
    },
    {
        "emoji": "‚ö°",
        "name": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "description": "Powerbank'–∏, –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏",
        "url": "https://osait.ru/category/portativnaya-elektronika/ "
    },
    {
        "emoji": "üóÑÔ∏è",
        "name": "–°–µ—Ä–≤–µ—Ä—ã –∏ –°–•–î",
        "description": "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ —à–∞—Å—Å–∏, NAS –∏ —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "url": "https://osait.ru/category/servery-i-skhd/ "
    },
    {
        "emoji": "üåê",
        "name": "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        "description": "–†–æ—É—Ç–µ—Ä—ã, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã –∏ —Å–µ—Ç–µ–≤—ã–µ –∫–∞—Ä—Ç—ã",
        "url": "https://osait.ru/category/setevoe-oborudovanie/ "
    },
    {
        "emoji": "üíø",
        "name": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ",
        "description": "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ—Ñ—Ç",
        "url": "https://osait.ru/category/programmnoe-obespechenie/ "
    }
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöÄ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
    [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
    [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
    [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
])
BACK_TO_MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
])
CATALOG_BACK_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ—â–Ω–∏–∫ OSAIT\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "üëâ –£–∑–Ω–∞–π—Ç–µ –æ –Ω–∞—Å\n"
            "üëâ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
            reply_markup=MAIN_KEYBOARD
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! ü§ñ –Ø –ø–æ–º–æ—â–Ω–∏–∫ OSAIT\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "üëâ –£–∑–Ω–∞–π—Ç–µ –æ –Ω–∞—Å\n"
            "üëâ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
            reply_markup=MAIN_KEYBOARD
        )

async def catalog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = []
    for idx, category in enumerate(CATEGORIES):
        keyboard.append([
            InlineKeyboardButton(
                f"{category['emoji']} {category['name']}",
                callback_data=f"cat_{idx}"
            )
        ])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    await query.message.edit_text(
        "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    category_idx = int(query.data.split("_")[1])
    category = CATEGORIES[category_idx]
    keyboard = [
        [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=category['url'])],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]
    ]
    await query.message.edit_text(
        f"{category['emoji']} *{category['name']}*\n"
        f"{category['description']}",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "–û –∫–æ–º–ø–∞–Ω–∏–∏ OSAIT:\n"
        "–ú—ã - –≤–µ–¥—É—â–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –†–æ—Å—Å–∏–∏\n"
        "–û—Å–Ω–æ–≤–∞–Ω—ã –≤ 2020 –≥–æ–¥—É\n"
        "–ë–æ–ª–µ–µ 100 —Ç—ã—Å. –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
        reply_markup=BACK_TO_MAIN_KEYBOARD
    )

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("WhatsApp", url="https://wa.me/79823143855 ")],
        [InlineKeyboardButton("Telegram", url="https://t.me/osait_support ")],
        [InlineKeyboardButton("üó∫Ô∏è Google Maps", url="https://goo.gl/maps/example ")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    await query.message.edit_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã OSAIT:\n"
        "üìß ooo_osa@internet.ru\n"
        "üìû +7 (982) 314-38-55\n"
        "üìç –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("FAQ", url="https://osait.ru/faq ")],
        [InlineKeyboardButton("–ß–∞—Ç-–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/osait_support ")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    await query.message.edit_text(
        "–ü–æ–º–æ—â—å:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/faq - –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: 24/7",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.lower()
    if any(word in text for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üòä –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup=MAIN_KEYBOARD
        )
    elif any(word in text for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—É–≤–∏–¥–∏–º—Å—è"]):
        await update.message.reply_text(
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üåü\n"
            "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å - –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        )
    else:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å ü§î\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update:
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(catalog, pattern="^catalog$"))
    application.add_handler(CallbackQueryHandler(about, pattern="^about$"))
    application.add_handler(CallbackQueryHandler(contacts, pattern="^contacts$"))
    application.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(show_category, pattern="^cat_"))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_to_main$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
